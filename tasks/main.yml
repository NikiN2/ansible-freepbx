- name: OS | Install Development tools
  yum: name="@Development tools" state=present

- name: OS | Install Packages
  yum: name={{ item }} state=present
  with_items: '{{ redhat_packages }}'

- name: OS | Install Pear Packages
  pear: name=Console_Getopt state=present

- name: OS | Add the Asterisk user
  user:
    name      : asterisk
    comment   : 'Asterisk user'
    createhome: no
    system    : yes

- name: MariaDB | Enable and start service
  service:
    name: mariadb
    state: started
    enabled: yes

- name: MariaDB | Remove anonymous users
  command: 'mysql -ne "{{ item }}"'
  with_items:
    - DELETE FROM mysql.user WHERE User=''
  changed_when: False

- name: MariaDB | Forbid remote root login
  command: 'mysql -ne "{{ item }}"'
  with_items:
    - DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1')
  changed_when: False

#- name: MariaDB | Remove test database
#  command: 'mysql -ne "{{ item }}"'
#  with_items:
#    - DROP DATABASE test
#    - DELETE FROM mysql.db WHERE Db='test' OR Db='test\\_%'
#  changed_when: False
#  ignore_errors: True

- name: MariaDB | Reload privilege tables
  command: 'mysql -ne "{{ item }}"'
  with_items:
    - FLUSH PRIVILEGES
  ignore_errors: True

- name: Iksemel | Download and unpack
  unarchive: 
#   src :  'http://iksemel.googlecode.com/files/iksemel-1.4.tar.gz'
    src : 'http://pkgs.fedoraproject.org/repo/pkgs/iksemel/iksemel-1.4.tar.gz/532e77181694f87ad5eb59435d11c1ca/iksemel-1.4.tar.gz'
    dest: '/usr/src'
    copy: no

- name: Iksemel | Run configure
  command: '{{ item }}'
  args:
    chdir: /usr/src/iksemel-1.4
  with_items:
    - ./configure
    - make
    - make install

- name: PjProject (PjSIP) | Download
  unarchive:
    src : 'http://www.pjsip.org/release/2.4/pjproject-2.4.tar.bz2'
    dest: '/usr/src'
    copy: no

- name: PjProject (PjSIP) | Install
  shell: '{{ item }}'
  args:
    chdir: /usr/src/pjproject-2.4
  environment:
    CFLAGS: '-DPJ_HAS_IPV6=0'
  with_items:
    - ./configure --prefix=/usr --enable-shared --disable-sound --disable-resample --disable-video --disable-opencore-amr --libdir=/usr/lib64
    - make dep
    - make
    - make install

#- name: Create Asterisk download dir
#  file: path=/usr/src/asterisk13 state=directory

- name: Jansson | Download
  unarchive:
    src : 'https://github.com/akheron/jansson/archive/v2.7.tar.gz'
    dest: '/usr/src/'
    copy: no

- name: Jansson | Install
  shell: '{{ item }}'
  args:
    chdir: /usr/src/jansson-2.7
  with_items:
    - autoreconf -i
    - ./configure --libdir=/usr/lib64
    - make
    - make install

- name: Asterisk | Download
  unarchive:
    src : 'http://downloads.asterisk.org/pub/telephony/asterisk/asterisk-13-current.tar.gz'
    dest: '/usr/src/'
    copy: no

- name: Asterisk | Register the src dir into Ansible
  shell: ls -d /usr/src/asterisk-*
  register: asterisk_dir

- name: Asterisk | Configure
  shell: ' {{ item }}'
  args:
    chdir: '{{ asterisk_dir.stdout }}'
    #chdir: '/usr/src/asterisk-13.9.1'
  with_items:
    - ./contrib/scripts/install_prereq install
    - ./configure --libdir=/usr/lib64
    - ./contrib/scripts/get_mp3_source.sh

#- name: Asterisk | Make menuedit 1
#  template:
#    src : 'files/menuselect.makedeps'
#    dest: '{{ asterisk_dir.stdout }}'
#    mode: 0644

#- name: Asterisk | Make menuedit 2
#  template:
#    src : 'files/menuselect.makeopts'
#    dest: '{{ asterisk_dir.stdout }}'
#    mode: 0644

#- name: Asterisk | Make menuedit 3
#  template:
#    src : 'files/menuselect-tree'
#    dest: '{{ asterisk_dir.stdout }}'
#    mode: 0644

- name: Asterisk | Compile
  command: '{{ item }}'
  args:
    chdir: '{{ asterisk_dir.stdout }}'
  with_items:
    - make menuselect.makeopts
    - menuselect/menuselect --enable format_mp3 menuselect.makeopts
    - make
    - make install
    - make config
    - ldconfig

- name: Asterisk | Disable
  service:
    name: asterisk
    enabled: no
    state: stopped

- name: Asterisk | Install Core WAV sounds
  unarchive:
    src : 'http://downloads.asterisk.org/pub/telephony/sounds/asterisk-core-sounds-en-wav-current.tar.gz'
    dest: '/var/lib/asterisk/sounds'
    copy: no

- name: Asterisk | Install Extra WAV sounds
  unarchive:
    src : 'http://downloads.asterisk.org/pub/telephony/sounds/asterisk-extra-sounds-en-wav-current.tar.gz'
    dest: '/var/lib/asterisk/sounds'
    copy: no

- name: Asterisk | Install Core g722 sounds
  unarchive:
    src : 'http://downloads.asterisk.org/pub/telephony/sounds/asterisk-core-sounds-en-g722-current.tar.gz'
    dest: '/var/lib/asterisk/sounds'
    copy: no

- name: Asterisk | Install Extra g722 sounds
  unarchive:
    src : 'http://downloads.asterisk.org/pub/telephony/sounds/asterisk-extra-sounds-en-g722-current.tar.gz'
    dest: '/var/lib/asterisk/sounds'
    copy: no

- name: Asterisk | Ensure ari.conf exists
  copy:
    content: ""
    dest: /etc/asterisk/ari.conf
    force: no

- name: Asterisk | Fix Permissions - /var/run/asterisk
  file:
    path   : '/var/run/asterisk'
    state  : directory
    owner  : 'asterisk'
    group  : 'asterisk'
    recurse: yes

- name: Asterisk | Fix Permissions - /etc/asterisk
  file:
    path   : '/etc/asterisk'
    state  : directory
    owner  : 'asterisk'
    group  : 'asterisk'
    recurse: yes

- name: Asterisk | FixPermissions - /var/lib/asterisk
  file:
    path   : '/var/lib/asterisk'
    state  : directory
    owner  : 'asterisk'
    group  : 'asterisk'
    recurse: yes

- name: Asterisk | FixPermissions - /var/log/asterisk
  file:
    path   : '/var/log/asterisk'
    state  : directory
    owner  : 'asterisk'
    group  : 'asterisk'
    recurse: yes

- name: Asterisk | FixPermissions - /var/spool/asterisk
  file:
    path   : '/var/spool/asterisk'
    state  : directory
    owner  : 'asterisk'
    group  : 'asterisk'
    recurse: yes

- name: Asterisk | FixPermissions - /usr/lib64/asterisk
  file:
    path   : '/usr/lib64/asterisk'
    state  : directory
    owner  : 'asterisk'
    group  : 'asterisk'
    recurse: yes

- name: Asterisk | FixPermissions - /var/www
  file:
    path   : '/var/www'
    state  : directory
    owner  : 'asterisk'
    group  : 'asterisk'
    recurse: yes

- name: httpd | Set httpd to use asterisk for user
  replace:
    dest   : '/etc/httpd/conf/httpd.conf'
    regexp : '(\s+)User\ apache(\s+.*)?$'
    replace: '\1User asterisk\2'

- name: httpd | Set httpd to use asterisk for group
  replace:
    dest   : '/etc/httpd/conf/httpd.conf'
    regexp : '(\s+)Group\ apache(\s+.*)?$'
    replace: '\1Group asterisk\2'

- name: httpd | AllowOverride = all
  replace:
    dest   : '/etc/httpd/conf/httpd.conf'
    regexp : '(?i)AllowOverride None'
    replace: 'AllowOverride All'

- name: httpd | Set php memory to 256M
  replace:
    dest   : '/etc/php.ini'
    regexp : 'memory_limit = 128M'
    replace: 'memory_limit = 256M'

- name: httpd | restart
  service:
    name: httpd
    state: restarted
    enabled: yes

- name: FreePBX | Download
  unarchive:
    src: 'http://mirror.freepbx.org/modules/packages/freepbx/freepbx-13.0-latest.tgz'
    dest: '/usr/src/'
    copy: no

- name: FreePBX | Install
  command: ' {{ item }}'
  args:
    chdir: '/usr/src/freepbx'
  with_items:
    - ./start_asterisk start
    - ./install -n

- name: FreePBX | Copy systemd script
  template:
    src : 'files/freepbx.service'
    dest: '/etc/systemd/system/freepbx.service'
    mode: 0755

- name: FreePBX | Start
  service:
    name: freepbx
    state: started
    enabled: yes

- name: FreePBX | Update
  command: '{{ item }}'
  with_items:
    - fwconsole ma updateall
    - fwconsole reload
